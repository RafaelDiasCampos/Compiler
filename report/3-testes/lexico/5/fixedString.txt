Token declare
Token id. Name: integer
Token id. Name: a
Token ,
Token id. Name: b
Token ,
Token id. Name: c
Token ,
Token id. Name: maior
Token ;
Token char
Token id. Name: outro
Token ;
Token begin
Token repeat
Token write
Token (
Token const string. Value: "A: "
Token )
Token ;
Token read
Token (
Token id. Name: a
Token )
Token ;
Token write
Token (
Token const string. Value: "B: "
Token )
Token ;
Token read
Token (
Token id. Name: b
Token )
Token ;
Token write
Token (
Token const string. Value: "C: "
Token )
Token ;
Token read
Token (
Token id. Name: c
Token )
Token ;
Token if
Token (
Token (
Token id. Name: a
Token >
Token id. Name: b
Token )
Token and
Token (
Token id. Name: a
Token >
Token id. Name: c
Token )
Token )
Token end
Token id. Name: maior
Token :=
Token id. Name: a
Token else
Token if
Token (
Token id. Name: b
Token >
Token id. Name: c
Token )
Token then
Token id. Name: maior
Token :=
Token id. Name: b
Token ;
Token else
Token id. Name: maior
Token :=
Token id. Name: c
Token end
Token end
Token write
Token (
Token const string. Value: "Maior valor:"
Token )
Token ;
Token write
Token (
Token id. Name: maior
Token )
Token ;
Token write
Token (
Token const string. Value: "Outro? (S/N)"
Token )
Token ;
Token read
Token (
Token id. Name: outro
Token )
Token ;
Token until
Token (
Token id. Name: outro
Token =
Token const char. Value: 'N'
Invalid token at position (28, 21)
Invalid token at position (28, 22)
Token id. Name: outro
Token =
Invalid token at position (28, 33)
Token )
Token end

LexicAnalyzer: 
SymbolTable: 
outro: Token id. Name: outro
else: Token else
then: Token then
if: Token if
maior: Token id. Name: maior
char: Token char
not: Token not
integer: Token id. Name: integer
float: Token float
repeat: Token repeat
until: Token until
routine: Token routine
end: Token end
declare: Token declare
int: Token int
write: Token write
or: Token or
a: Token id. Name: a
while: Token while
and: Token and
do: Token do
read: Token read
b: Token id. Name: b
begin: Token begin
c: Token id. Name: c
