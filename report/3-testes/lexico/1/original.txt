Token routine
Token declare
Token int
Token id. Name: a
Token ,
Token id. Name: b
Token ;
Token int
Token id. Name: resul
Token ;
Token float
Token id. Name: a
Token ,
Token id. Name: x
Token ;
Token begin
Token id. Name: a
Token :=
Token const int. Value: 12
Token id. Name: a
Token ;
Token id. Name: x
Token :=
Token const int. Value: 12
Token ;
Token read
Token (
Token id. Name: a
Token )
Token ;
Token read
Token (
Token id. Name: b
Token )
Token ;
Token read
Token (
Token id. Name: c
Token )
Token id. Name: result
Token :=
Token (
Token id. Name: a
Token *
Token id. Name: b
Token +
Token const int. Value: 1
Token )
Token /
Token (
Token id. Name: c
Token +
Token const int. Value: 2
Token )
Token ;
Token write
Token const string. Value: "Resultado: "
Token ;
Token write
Token (
Token id. Name: result
Token )
Token ;
Token end

LexicAnalyzer: 
SymbolTable: 
result: Token id. Name: result
x: Token id. Name: x
and: Token and
c: Token id. Name: c
not: Token not
resul: Token id. Name: resul
int: Token int
read: Token read
float: Token float
until: Token until
routine: Token routine
declare: Token declare
then: Token then
b: Token id. Name: b
a: Token id. Name: a
char: Token char
if: Token if
or: Token or
end: Token end
else: Token else
begin: Token begin
repeat: Token repeat
while: Token while
do: Token do
write: Token write
