Token routine
Token int
Token id. Name: a
Token ,
Token id. Name: b
Token ,
Token id. Name: c
Token ;
Token float
Token id. Name: d
Token ,
Invalid token at position (4, 11)
Token id. Name: var
Token begin
Token read
Token (
Token id. Name: a
Token )
Token ;
Token id. Name: b
Token :=
Token id. Name: a
Token *
Token id. Name: a
Token ;
Token id. Name: c
Token :=
Token id. Name: b
Token +
Token id. Name: a
Token /
Token const int. Value: 2
Token *
Token (
Token const int. Value: 35
Token /
Token id. Name: b
Token )
Token ;
Invalid token at position (16, 4)

LexicAnalyzer: 
SymbolTable: 
var: Token id. Name: var
d: Token id. Name: d
and: Token and
c: Token id. Name: c
not: Token not
int: Token int
read: Token read
float: Token float
until: Token until
routine: Token routine
declare: Token declare
then: Token then
b: Token id. Name: b
a: Token id. Name: a
char: Token char
if: Token if
or: Token or
end: Token end
else: Token else
begin: Token begin
repeat: Token repeat
while: Token while
do: Token do
write: Token write
